uses 'network';
uses 'number';
uses 'reflection';
uses 'xml';

namespace modifies XML {
	class modifies Element {
		function elementsByName( string name ) {
			array list = [];
			.getChildren().each() using ( child ) {
				if( child.getElementName() == name ) {
					list[] = child;
				}
			};
			return list;
		}
		function elementByName( string name ) {
			array list = .elementsByName(name);
			if( list ) {
				return list[0];
			}
			return null;
		}
	}
}

class modifies Obj {
	static function attributesExportedToRPC {
		return [];
	}
	
	static function attributesImportedFromRPC {
		return [];
	}
	
	directive rpc_export( ... ) {
		array attributes = [];
		string classChanges;
		Array.each(arguments()) using ( attr ) {
			attributes[] = "'${attr}'";
		};
		classChanges += "class modifies ${Class.name(self)} {";
		classChanges += "	static function attributesExportedToRPC {";
		classChanges += "		return [ ${attributes.join(',')} ];";
		classChanges += "	}";
		classChanges += "	function toSOAP {";
		classChanges += "		return .toSOAP( [ ${attributes.join(',')} ] );";
		classChanges += "	}";
		classChanges += "}";
		eval(classChanges);
	}
	
	directive rpc_import( ... ) {
		array attributes = [];
		string classChanges;
		Array.each(arguments()) using ( attr ) {
			object r = new Regexp('([A-Za-z0-9]+):(.+)');
			object match = r.match(attr);
			if( match ) {
				attributes[match.capture(0)] = match.capture(1);
			}
		};
		classChanges += "class modifies ${Class.name(self)} {";
		classChanges += "	static function attributesImportedFromRPC {";
		classChanges += "		return [";
		attributes.map() using ( name, type ) {
			classChanges += "	'${name}' => '${type}',";
		};
		classChanges = classChanges.trim(',');
		classChanges += "		];";
		classChanges += "	}";
		classChanges += "}";
		eval(classChanges);
	}
	
	function toSOAP( array attributes ) {
		object wrapper = new Object(self);
		return attributes.join('') using ( name ) {
			return SOAP.toSOAP( name, wrapper.getVariable(name), false );
		};
	}
	
	function toSOAP {
		return .toSOAP([]);
	}
	
}

class RPCObject {
	array _variables;
	
	function attribute_missing( string name ) {
		return ._variables[name];
	}
}

namespace SOAP {
	function toSOAP( string name, string value, boolean includeNamespace ) {
		string ns;
		if( includeNamespace )
			ns = ' xmlns="http://schemas.datacontract.org/2004/07/Solidus.OpenMedia.Contracts.DataContracts"';
		return "<${name}${ns}>${value}</${name}>";
	}
	function toSOAP( string name, number value, boolean includeNamespace ) {
		string ns;
		if( includeNamespace )
			ns = ' xmlns="http://schemas.datacontract.org/2004/07/Solidus.OpenMedia.Contracts.DataContracts"';
		if(name == 'openMediaID'){	
		return "<${name}>${value}</${name}>";
		}
		else { return "<${name}${ns}>${value}</${name}>"; }
	}
	function toSOAP( string name, boolean value, boolean includeNamespace ) {
		string ns;
		if( includeNamespace )
			ns = ' xmlns="http://schemas.datacontract.org/2004/07/Solidus.OpenMedia.Contracts.DataContracts"';
		return "<${name}${ns}>${value}</${name}>";
	}
	function toSOAP( string name, array value, boolean includeNamespace ) {
		string node;
		string ns;
		if( includeNamespace )
			ns = ' xmlns="http://schemas.datacontract.org/2004/07/Solidus.OpenMedia.Contracts.DataContracts"';
		node += "<${name}${ns}>";
		value.each() using ( item ) {
			node += SOAP.toSOAP((item isa object ? item.getName() : 'item'), item, false);
		};
		node += "</${name}>";
		return node;
	}
	function toSOAP( string name, object value, boolean includeNamespace ) {
		string ns;
		if( includeNamespace )
			ns = ' xmlns="http://schemas.datacontract.org/2004/07/Solidus.OpenMedia.Contracts.DataContracts"';
		if( value ) {
			return "<${name}${ns}>" + value.toSOAP() + "</${name}>";
		}
		return "<${name}${ns} />";
	}
	function toValue( string type, object node ) {
		object match = Regexp.match('([A-Za-z0-9]+)(<([A-Za-z0-9\.]+)>)?', type);
		string real_type = match.capture(0);
		string hint = 'string';
		if( match.capture(2) ) {
			hint = match.capture(2);
		}
		switch( real_type ) {
			case 'boolean': {
				string value = node.getElementData().toLower();
				if( value == '1' or value == 'true' )
					return true;
				return false;
			}
			case 'number':
				return node.getElementData().toNumber();
			case 'string':
				return node.getElementData();
			case 'array': {
				array value = [];
				node.getChildren().each() using ( child ) {
					value[] = SOAP.toValue(hint, child);
				};
				return value;
			}
			default: {
				object c = Class.classWithName(real_type);
				if( c ) {
					object f = c.getFunction('attributesImportedFromRPC');
					array attributes = f.exec();
					object value = new RPCObject();
					node.getChildren().each() using ( child ) {
						string name = child.getElementName();
						if( attributes.keyExists(name) ) {
							value._variables[name] = SOAP.toValue(attributes[name], child);
						} else {
							raise new Error("Unknown attribute '$name' in class '$real_type'");
						}
					};
					return value;
				} else {
					raise new Error("Could not find class with name '$real_type'");
				}
			}
		}
	}
	
	function fault( string code, string reason ) {
		return .fault( code, '', reason );
	}
	function fault( string code, string subcode, string reason ) {
		string message;
		message += "<?xml version='1.0' ?>";
		message += '<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">';
		message += '<env:Body>';
		message += '<env:Fault>';
		message += '<env:Code>';
		message += "<env:Value>${code}</env:Value>";
		message += (subcode ? "<env:Subcode><env:Value>${subcode}</env:Value></env:Subcode>" : '');
		message += '</env:Code>';
		message += "<env:Reason><env:Text xml:lang=\"en-US\">${reason}</env:Text></env:Reason>";
		message += '</env:Fault>';
		message += '</env:Body>';
		message += '</env:Envelope>';
		return message;
	}
	
	class Envelope {	
		array variables;
		array header;
		array body;
		
		constructor( string message, array body ) {
			self(message, [], body);
		}
		
		constructor( string message, array header, array body ) {
			object tree = new XML.TreeParser();
			tree.keepBlanks(false);
			monitor {
				tree.parseChunk(message);
			} handle {
				raise new Error("Parse error: ${err.str} [message: ${message}]");
			} else {
				.header = header;
				.body = body;
				.variables = .walkEnvelopeNode(tree.getDocumentElement());
				if( .variables.keyExists('error') ) {
					raise new Error('Error while processing message: ' +.variables['error']['messages'].join(', ') + " [message: ${Regexp.replaceAll('<', message, '&lt;')}]");
				} else if( .variables['body'].keyExists('fault') ) {
					string code = .variables['body']['fault']['code'];
					string subcode;
					if( .variables['body']['fault'].keyExists('subcode') ) {
						subcode = .variables['body']['fault']['subcode'];
					}
					raise new Error("Message Body contained Fault: [Code: ${code}]" + (subcode ? " [SubCode: ${subcode}]." : '.'));
				}
			}
		}
		
		function walkEnvelopeNode( object envelopeNode ) {
			array result = [];
			array error = [];
			
			if( not envelopeNode.getElementName() == 'Envelope' ) {
				error[] = "Document element name was not 'Envelope'";
			} else {
				object headerNode = envelopeNode.elementByName('Header');
				object bodyNode = envelopeNode.elementByName('Body');
				
				if( headerNode ) {
					array header = .walkHeaderNode(headerNode);
					if( header.keyExists('error') ) {
						error = error.append(header['error']);
					}
					result['header'] = header;
				}
				
				if( bodyNode ) {
					array body = .walkBodyNode(bodyNode);
					if( body.keyExists('error') ) {
						error = error.append(body['error']);
					}
					result['body'] = body;
				} else {
					error[] = "Element 'Envelope' did not contain a 'Body' element";
				}
			}
			
			if( error ) {
				result['error'] = [];
				result['error']['messages'] = error;
			}
			
			return result;
		}
		
		function walkHeaderNode( object node ) {
			array result;
			return result;
		}
		
		function walkBodyNode( object bodyNode ) {
			array result = [];
			array error = [];
			
			object childNode = bodyNode.getFirstChild();
			
			if( childNode ) {
				if( childNode.getElementName() == 'Fault' ) {
					array fault = .walkFaultNode(childNode);
					if( fault.keyExists('error') ) {
						error = error.append(fault['error']);
					}
					result['fault'] = fault;
				} else {
					string name = childNode.getElementName();
					array parameters = [];
					if( .body.keyExists(name) ) {
						childNode.getChildren().each() using ( parameter_node ) {
							string parameter_name = parameter_node.getElementName();
							if( .body[name].keyExists(parameter_name) ) {
								parameters[parameter_name] = SOAP.toValue(.body[name][parameter_name], parameter_node);
							}
						};
						result['procedure-name'] = name;
						result['procedure-parameters'] = parameters;
					} else {
						error[] = "Unexpected element '$name' in element 'Body'";
					}
				}
			} else {
				error[] = "Element 'Body' did not contain any children";
			}
			
			if( error ) {
				result['error'] = error;
			}
			
			return result;
		}
		
		function walkFaultNode( object faultNode ) {
			array result = [];
			array error = [];
			
			object codeNode = faultNode.elementByName('Code');
			object reasonNode = faultNode.elementByName('Reason');
			
			if( codeNode ) {
				object valueNode = codeNode.elementByName('Value');
				object subcodeNode = codeNode.elementByName('Subcode');
				
				if( valueNode ) {
					result['code'] = Regexp.match('^(.*:)?(.*)$', valueNode.getElementData()).capture(1);
				} else {
					error[] = "Element 'Code' did not contain a 'Value' element";
				}
				
				if( subcodeNode ) {
					valueNode = subcodeNode.elementByName('Value');
					if( valueNode ) {
						result['subcode'] = Regexp.match('^(.*:)?(.*)$', valueNode.getElementData()).capture(1);
					} else {
						error[] = "Element 'Subcode' did not contain a 'Value' element";
					}
				}
			} else {
				codeNode = faultNode.elementByName('faultcode');
				if( codeNode ) {
					result['code'] = codeNode.getElementData();
				} else {
					error[] = "Element 'Fault' did not contain a 'Code' element";
				}
			}
			
			if( reasonNode ) {
				array texts = [];
				reasonNode.elementsByName('Text').each() using ( textNode ) {
					if( textNode.hasAttribute('lang') ) {
						texts[textNode.getAttributeByName('lang')] = textNode.getElementData();
					}
				};
				if( texts ) {
					result['text'] = texts;
				}
			} else {
				reasonNode = faultNode.elementByName('faultstring');
				if( reasonNode ) {
					result['text'] = reasonNode.getElementData();
				}
			}
			
			if( error ) {
				result['error'] = error;
			}
			
			return result;
		}
		
		function returnValue() {
			if( .variables.keyExists('body') and .variables['body'].keyExists('procedure-parameters') and .variables['body']['procedure-parameters'] )
				return .variables['body']['procedure-parameters'][0];
		}
		
		function procedureName() {
			if( .variables.keyExists('body') and .variables['body'].keyExists('procedure-name') )
				return .variables['body']['procedure-name'];
		}

		function procedureParameters() {
			if( .variables.keyExists('body') and .variables['body'].keyExists('procedure-parameters') )
				return .variables['body']['procedure-parameters'];
			return [];
		}
	}
	
	namespace RPC {
		string url;
		
		function setDefaults( string url ) {
			.url = url;
		}
		
		function readResponse( object response, array body ) {
			object envelope;
			envelope = new SOAP.Envelope(response.body(), body);
			
			return envelope.returnValue();
		}
		
		function sendRequest( string url, string action, string content, array body ) {
			object http = Network.HTTP.post(url);
			http.headersAdd('Content-Type', 'text/xml; charset=utf-8');
			action and http.headersAdd('SOAPAction', action);
			http.payload(content);
			return .readResponse(http.run(), body);
		}
		
		function invoke( string url, string f, array parameters, string result ) {
			return .invoke( url, '', f, parameters, result, 'return' );
		}
		function invoke( string url, string action, string f, array parameters, string result, string resultName ) {
			array body = [ "${f}Response" => [ "${resultName}" => result ] ];
			string message;
			
			message += "<?xml version='1.0' ?>";
			/*
			message += '<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope"';
			message += ' xmlns:xsd="http://www.w3.org/2001/XMLSchema"';
			message += ' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">';
			*/
			message += '<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"';
			message += ' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"';
			message += ' xmlns:xsd="http://www.w3.org/2001/XMLSchema">';
			//message += '<soap:Header>';
			//message += '</soap:Header>';
			message += '<soap:Body>';
			//message += "<${f} xmlns:enc=\"http://www.w3.org/2003/05/soap-encoding\">";
			//message += "<${f} xmlns:enc=\"http://www.w3.org/2003/05/soap-encoding\">";
			message += "<${f} xmlns=\"http://tempuri.org/\">";
			if(resultName == 'GetOpenMediaRequestStatusByIDResult'){
			
			}else {
				message += '<request>';
			}
			
			parameters.eachWithIndex() using ( value, index ) {
				string name = parameters.getName(index);
				message += SOAP.toSOAP( name, value, true );
			};
			
			if(resultName == 'GetOpenMediaRequestStatusByIDResult'){
			
			}else {
				message += '</request>';
			}
			message += "</${f}>";
			message += '</soap:Body>';
			message += '</soap:Envelope>';
			return .sendRequest( url, action, message, body );
		}
		
		function invoke( string f, array parameters, string result ) {
			return .invoke(.url, f, parameters, result);
		}
		
		function response( string f, void value ) {
			string message;
			
			message += "<?xml version='1.0' ?>";
			message += '<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope"';
			message += ' xmlns:xsd="http://www.w3.org/2001/XMLSchema"';
			message += ' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">';
			message += '<env:Body>';
			message += "<${f}Response xmlns:enc=\"http://www.w3.org/2003/05/soap-encoding\">";
			
			if( not (value isa void) ) {
				message += SOAP.toSOAP('return', value);
			}
			
			message += "</${f}Response>";
			message += '</env:Body>';
			message += '</env:Envelope>';
			
			return message;
		}
	}
}
/*
namespace WSDL {
	function create( string name ) {
		object file = new WSDL.File(name);
		if( recipient() ) {
			deliver(file);
		}
		return file;
	}
	
	class File {
		string name;
		array complexTypes;
		array messages;
		array portTypes;
		
		constructor( string name ) {
			.name = name;
		}
		
		function addComplexType( string name ) {
			object complexType = new WSDL.ComplexType( name );
			if( recipient() ) {
				deliver(complexType);
			}
			return complexType;
		}
		
		function addMessage( string name ) {
			object message = new WSDL.Message(name);
			if( recipient() ) {
				deliver(message);
			}
			return message;
		}
		
		function addPortType( string name ) {
			object portType = new WSDL.PortType(name);
			if( recipient() {
				deliver(portType);
			}
			return portType;
		}
		
		function toString {
			
		}
	}
	
	class ComplexType {
	}
	
	class Message {
		string name;
		array parts;
		
		constructor( name ) {
			.name = name;
		}
		
		function addPart( string name, string type ) {
			object part = new WSDL.Part( name, type );
			parts[] = part;
		}
		
		function toString {
			string output = " <message name=\"${.name}\">\n";
			.parts.each() using ( part ) {
				output += part.toString();
			};
			output += " </message>\n";
			return output;
		}
	}
	
	class Part {
		string name;
		string type;
		
		constructor( string name, string type ) {
			object match = Regexp.match('^(.*:)?(.*)$', type).capture(1); 
			string type = match.capture(1);
			string hint = match.catpure(0);
			.name = name;
			switch( type ) {
				case 'string':
					.type = 'xsd:string';
					break;
				case 'number':
					.type = 'xsd:long';
					break;
				case 'boolean':
					.type = 'xsd:boolean';
					break;
				case 'array':
					.type = "typens:${hint}Array";
				default:
					.type = type;
			}
		}
		
		function toString {
			return "  <part name=\"${.name}\" type=\"${.type}\" />\n";
		}
	}
	
	class PortType {
	}
}
*/
