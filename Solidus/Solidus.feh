uses 'console';
uses 'SOAP';
uses 'logger';

class AddRequestResult {
	number EWT;
	number OpenMediaID;
	number QueuePosition;
	number RequestStatus;
	
	[rpc_import 'EWT:number', 'OpenMediaID:number', 'QueuePosition:number', 'RequestStatus:string'];
}

class GetOpenMediaRequestStatusByIDResult {
	array OpenMediaRequests;
	string TimeStamp;
        
	[rpc_import 'OpenMediaRequests:array<OpenMediaRequest>' , 'TimeStamp:string'];
}

class OpenMediaRequest {
	number ID;
	number AgentID;
	number LogonID;
	string Status;
	number TenantID;
	number TimeStamp;
	
	[rpc_import 'AgentID:number', 'ID:number' , 'LogonID:number' , 'Status:string' , 'TenantID:number' , 'TimeStamp:string'];
}

class IVRInformation {
	string Label;
	string Data;
	
	constructor( string label, string data ) {
		.Label = label;
		.Data = data;
	}
	
	[rpc_export Label, Data];
}

namespace Solidus {
	function addRequest( object errand, number preferredAgentID ) {
		number GetOpenMediaId;
		object area = Workflow.Area.load(errand.targetArea.id);	
	
		monitor {
			object result;
			array parameters;

			parameters['ForceToPreferredAgent'] = false;
			parameters['IVRInfo'] = [ new IVRInformation('label1', 'data1'), new IVRInformation(), new IVRInformation() ];
			parameters['PreferredAgentID'] = preferredAgentId;
			parameters['PrivateData'] = F('solidus.open-errand-url') + '/workflow/-/answer/' + errand.id;
			parameters['ServiceGroupID'] = area.solidusServiceGroupID;
			parameters['ServiceGroupName'] = '';
			parameters['TenantID'] = -1;

			result = SOAP.RPC.invoke(
				  F('solidus.server-address') + '/OpenMediaService',
				  F('solidus.soap-action-url') + '/IOpenMediaService/AddRequest',
				  'AddRequest',
				  parameters,
				  'AddRequestResult',
				  'AddRequestResult'
			);
		
			GetOpenMediaId = result.OpenMediaID;
		} handle {
			Logger.debug(Logger.APPLICATION_SOLIDUS, " !!! Error:(${err.str}) for Workflow.Errand(${errand.id})");
		}
	
		return GetOpenMediaId;
	}


	function CancelRequest( object errand ) {
		boolean status;
	
		monitor {
			array parameters;
		
			parameters['OpenMediaID'] = errand.solidusOpenMediaId;
			parameters['CancelIfAllocated'] = 1;
			parameters['DoNotReport'] = 0;
		
			status = SOAP.RPC.invoke(
				F('solidus.server-address') + '/OpenMediaService',
				F('solidus.soap-action-url') + '/IOpenMediaService/CancelRequest',
				'CancelRequest',
				parameters,
				'boolean',
				'CancelRequestResult'
			);
		} handle {
			Logger.debug(Logger.APPLICATION_SOLIDUS, " !!! Error:(${err.str}) for Workflow.Errand(${errand.id})");
		}
	
		return status;
	}

	function getOpenMediaRequestStatus( object errand ) {
		string getStatusOfOpenMedia;

		monitor {
			array parameters;
			object status;
		
			parameters['openMediaID'] = errand.solidusOpenMediaID;
			
			status = SOAP.RPC.invoke(
				F('solidus.server-address') + '/OpenMediaService',
				F('solidus.soap-action-url') + '/IOpenMediaService/GetOpenMediaRequestStatusByID',
				'GetOpenMediaRequestStatusByID',
				parameters,
				'GetOpenMediaRequestStatusByIDResult',
				'GetOpenMediaRequestStatusByIDResult'
			);

			status.OpenMediaRequests.each() using ( message ) {
				getStatusOfOpenMedia = message.Status;	
			};     

		} handle {
			Logger.debug(Logger.APPLICATION_SOLIDUS, " !!! Error:(${err.str}) for Workflow.Errand(${errand.id})");
		}
	
		return getStatusOfOpenMedia;
	}
}

