uses 'logger';
uses 'SOAP';
uses 'console';

namespace Bright {

	static string serverAddress;
	static string soapActionURL;
	
	function setDefaults( string serverAddress, string soapActionURL ) {
		.serverAddress = serverAddress;
		.soapActionURL = soapActionURL;
	}
	
	function sendRequest( string url, string action, string f, array parameters, string result, string resultName ) {
		array body = [ "${f}Response" => [ "${resultName}" => result ] ];
		string message;
	
		message += "<?xml version='1.0' ?>";
		message += '<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"';
		message += ' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"';
		message += ' xmlns:xsd="http://www.w3.org/2001/XMLSchema">';
		message += '<soap:Body>';
		message += "<${f} xmlns=\"${.soapActionURL}\">";
		
		parameters.eachWithIndex() using ( value, index ) {
			string name = parameters.getName(index);
			message += SOAP.toSOAP( name, value, '');
		};
		
		message += "</${f}>";
		message += '</soap:Body>';
		message += '</soap:Envelope>';
		
		return SOAP.RPC.sendRequest( url, action, message, body );
	}

	function EnqueueEmail(string email, string companyRefCode, string agentRefCode, string surveyRefCode, string languageCode, string username, string password) {	
		string result;

		monitor {
			array parameters;

			parameters['Email'] = email;
			parameters['CompanyRefCode'] = companyRefCode;
			parameters['AgentRefCode'] = agentRefCode;
			parameters['SurveyRefCode'] = surveyRefCode;
			parameters['LanguageCode'] = languageCode;
			parameters['Username'] = username;
			parameters['Password'] = password;

			result = .sendRequest(
					.serverAddress,
					.soapActionURL + '/EnqueueEmail',
					'EnqueueEmail',
					parameters,
					'string',
 					'EnqueueEmailResult'
				);
			
		} handle {
			result = null;
		}
		
		return result;
	}

}