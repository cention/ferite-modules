class CentionChatQueue extends ChatQueue implements ChatQueueProtocol {
	function _assignAgent( object area ) {
		object assignedAgent = null;

		array list = Workflow.User.availableForChatList([ area.id ]);
		if( list ) {
			array possibleAgents = [];

			if( F('chat.assign-to-highest-amount') ) {
				number highestAmountOfAssignedChats = list[0]['count'];
				list.each() using ( row ) {
					if( row['count'] > highestAmountOfAssignedChats ) {
						highestAmountOfAssignedChats = row['count'];
					}
				};

				list.each() using ( row ) {
					if( row['count'] == highestAmountOfAssignedChats ) {
						possibleAgents[] = row['workflow_user_id'];
					}
				};
			} else {
				number lowestAmountOfAssignedChats = list[0]['count'];
				list.each() using ( row ) {
					if( row['count'] < lowestAmountOfAssignedChats ) {
						lowestAmountOfAssignedChats = row['count'];
					}
				};
				list.each() using ( row ) {
					if( row['count'] == lowestAmountOfAssignedChats ) {
						possibleAgents[] = row['workflow_user_id'];
					}
				};
			}
			
			if( possibleAgents ) {
				boolean chooseRandom = (F('chat.assign-to-highest-allowed') ? false : true);
				if( chooseRandom ) {
					number random = Math.randomNumber(0, possibleAgents.size() - 1);
					assignedAgent = Workflow.User.load(possibleAgents[random]);
				} else {
					array agents = [];
					array agentsWithHighestChatAmount = [];
					number highestAllowedChat = 0;
					number random = 0;
					possibleAgents.each() using ( id ) {
						object agent = Workflow.User.load(id);
						agents["$id"] = agent;
						if( agent.allowedChatAmount > highestAllowedChat )
							highestAllowedChat = agent.allowedChatAmount;
					};
					possibleAgents.each() using ( id ) {
						object agent = agents["$id"];
						if( agent.allowedChatAmount == highestAllowedChat )
							agentsWithHighestChatAmount[] = agent.id;
					};
					random = Math.randomNumber(0, agentsWithHighestChatAmount.size() - 1);
					assignedAgent = Workflow.User.load(agentsWithHighestChatAmount[random]);
				}
			}
		}

		return assignedAgent;
	}

	function constructor( number systemgroup ) {
		.setSystemGroup(systemgroup);
		.log('(Cention) Invoking: constructor');
	}
	function isOpen( object area ) {
		.log('(Cention) Invoking: isOpen');
		return true;
	}
	function addChat( object chat ) {
		object assignedAgent;
		.log('(Cention) Invoking: addChat');
		assignedAgent = ._assignAgent(chat.area);
		if( assignedAgent ) {
			chat.setValue('status', Workflow.ChatSession.STATUS_STARTED);
			chat.setValue('user', assignedAgent);
			chat.save();
		} else {
			chat.setValue('status', Workflow.ChatSession.STATUS_WAITING_ON_AGENT);
			chat.save();
		}
		return true;
	}
	function endChat( object chat ) {
		.log('(Cention) Invoking: endChat');
		.advanceQueue(null);
		return true;
	}
	function hangUpChat( object chat ) {
		.log('(Cention) Invoking: hangUpChat');
		.advanceQueue(null);
		return true;
	}
	function advanceQueue( object area ) {
		array allAreaIDs;
		array availableUserIDs;
		object nextChat;

		.log('(Cention) Invoking: advanceQueue');

		allAreaIDs = Workflow.SystemGroup.areasFromCache(.currentSystemGroup());
		availableUserIDs = Workflow.User.availableForChatList(allAreaIDs);

		availableUserIDs.each() using ( userID ) {
			object user = Workflow.User.load(userID['workflow_user_id']);
			array areaIDs = Workflow.Area.idListByArrayForUser(allAreaIDs, user.id);
			while( user.canBeAssignedMoreChat(.currentSystemGroup(), areaIDs) ) {
				nextChat = Workflow.ChatSession.nextUnassignedChat(areaIDs);
				if( nextChat ) {
					nextChat.setValue('status', Workflow.ChatSession.STATUS_STARTED);
					nextChat.setValue('user', user);
					nextChat.save();
					continue;
				}
				break;
			}
		};

		nextChat = Workflow.ChatSession.nextUnassignedChat(allAreaIDs);
		if( nextChat )
			return false;

		return true;
	}
}