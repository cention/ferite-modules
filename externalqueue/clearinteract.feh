uses 'externalqueue';

namespace ClearInteract {
	string host = 'localhost';
	boolean includeCustomerDataInStampCentionItemStarted = false;
	
	function invoke( string url, string f, array parameters, string result ) {
		array body = [ "${f}Response" => [ "${f}Return" => result ] ];
		string message;
		
		message += "<?xml version='1.0' ?>";
		message += '<soapenv:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"';
		message += ' xmlns:xsd="http://www.w3.org/2001/XMLSchema"';
		message += ' xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"';
		message += ' xmlns:ser="services.soap.uqf.clearit.se">';
		
		message += '<soapenv:Body>';
		message += "<ser:${f} soapenv:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">";
		
		parameters.eachWithIndex() using ( value, index ) {
			string name = parameters.getName(index);
			message += SOAP.toSOAP(name, value, '');
		};
		
		message += "</ser:${f}>";
		message += '</soapenv:Body>';
		message += '</soapenv:Envelope>';
		
		return SOAP.RPC.sendRequest(url, ' ' /* String with a space is correct */, message, body);
	}
	
	function getQueuedItemsMapped( string taskIdentifier ) {
		return .invoke(
			.host + '/Uqf2',
			'getQueuedItemsMapped',
			[ 'taskIdentifier' => taskIdentifier ],
			'string'
		);
	}

	function queueCentionItem( number ItemId,
	                           string taskIdentifier,
	                           string url,
	                           string errandId,
	                           string area,
	                           string channel,
	                           string creationTime )
	{
		return .invoke(
			.host + '/UqfCention',
			'queueCentionItem',
			[
				'ItemId' => (ItemId > 0 ? ItemId : -1),
				'taskIdentifier' => taskIdentifier,
				'url' => url,
				'errandId' => errandId,
				'area' => area,
				'channel' => channel,
				'creationTime' => creationTime
			],
			'number'
		);
	}
	
	function queuePersonalCentionItem( number itemId,
	                                   string taskIdentifier,
	                                   string agentIdentifier,
	                                   string url,
	                                   string errandId,
	                                   string area,
	                                   string channel,
	                                   string creationTime )
	{
		return .invoke(
			.host + '/UqfCention',
			'queuePersonalCentionItem',
			[
				'itemId' => itemId,
				'taskIdentifier' => taskIdentifier,
				'agentIdentifier' => agentIdentifier,
				'url' => url,
				'errandId' => errandId,
				'area' => area,
				'channel' => channel,
				'creationTime' => creationTime
			],
			'number'
		);
	}

	function endCentionItem( number itemId, string reason ) {
		return .invoke(
			.host + '/UqfCention',
			'endCentionItem',
			[ 'itemId' => itemId, 'reason' => reason ],
			'number'
		);
	}

	function pullCentionItem( number itemId ) {
		return .invoke(
			.host + '/UqfCention',
			'pullCentionItem',
			[ 'itemId' => itemId, 'reason' => 'Pulled' ],
			'number'
		);
	}

	function queueCentionSession( number itemId, string taskIdentifier, string url, string creationTime ) {
		return .invoke(
			.host + '/UqfCentionSession',
			'queueCentionSession',
			[ 'itemId' => itemId, 'taskIdentifier' => taskIdentifier, 'url' => url, 'creationTime' => creationTime ],
			'number'
		);
	}

	function endCentionSession( number itemId, string reason ) {
		return .invoke(
			.host + '/UqfCentionSession',
			'endCentionSession',
			[ 'itemId' => itemId, 'reason' => reason ],
			'number'
		);
	}

	function stampCentionItemStarted( number itemId,
	                                  number sessionItemId,
	                                  string errandId,
	                                  string area,
	                                  string channel,
	                                  string creationTime,
	                                  string CustomerData )
	{
		array parameters = [
			'itemId' => itemId,
			'sessionItemId' => sessionItemId,
			'errandId' => errandId,
			'area' => area,
			'channel' => channel,
			'creationTime' => creationTime
		];
		if( .includeCustomerDataInStampCentionItemStarted ) {
			parameters['CustomerData'] = CustomerData;
		}
		return .invoke(
			.host + '/UqfCentionSession',
			'stampCentionItemStarted',
			parameters,
			'number'
		);
	}

	function stampCentionItemEnded( number itemId, number sessionItemId, string reason ) {
		return .invoke(
			.host + '/UqfCentionSession',
			'stampCentionItemEnded',
			[ 'itemId' => itemId, 'sessionItemId' => sessionItemId, 'reason' => reason ],
			'number'
		);
	}

	function reportQueueLength( string taskIdentifier, number queueLength ) {
		return .invoke(
			.host + '/UqfCentionSession',
			'reportQueueLength',
			[ 'taskIdentifier' => taskIdentifier, 'queueLength' => queueLength ],
			'number'
		);
	}
}

class ClearInteractQueue implements ExternalQueue {
	static string SystemBaseURL = 'http://localhost';
	
	static function name() {
		return 'clearinteract';
	}
	static function configure( array options ) {
		if( options.keyExists('server-address') )
			ClearInteract.host = options['server-address'];
		if( options.keyExists('include-customerdata-in-stampcentionitemstarted') )
			ClearInteract.includeCustomerDataInStampCentionItemStarted = options['include-customerdata-in-stampcentionitemstarted'];
		if( options.keyExists('open-errand-url') )
			.SystemBaseURL = options['open-errand-url'];
	}

	static function finaliseActions() {
		// Do nothing.
	}
	
	static function addErrand( object errand, object user ) {
		number itemId = (errand.externalID ? errand.externalID : -1);
		string taskIdentifier = errand.targetArea.externalID;
		string agentIdentifier = (user ? user.externalID : '');
		string url = "${.SystemBaseURL}/workflow/-/external/open/${errand.id}/update/[at_agent_id]";
		string errandId = 'errand/' + errand.id;
		string area = errand.targetArea.name + '/' + errand.targetArea.id;
		string channel = errand.service.name;
		string creationTime = Date.localDate(errand.timestampArrive + Date.timezone()).format('%F %H:%M');
		number returnItemId;

		if( user ) {
			returnItemId = ClearInteract.queuePersonalCentionItem(itemId,
			                                                      taskIdentifier,
			                                                      agentIdentifier,
			                                                      url,
			                                                      errandId,
			                                                      area,
			                                                      channel,
			                                                      creationTime);
		} else {
			returnItemId = ClearInteract.queueCentionItem(itemId,
			                                              taskIdentifier,
			                                              url,
			                                              errandId,
			                                              area,
			                                              channel,
			                                              creationTime);
		}

		if( returnItemId > 0 ) {
			errand.setValue('queuedInExternal', true);
			errand.setValue('externalID', returnItemId);
			errand.save();
			return true;
		} else if( returnItemId == -8 ) {
			// Because of how CI works the queueCentionItem request will fail when it is performed
			// for Return to inbox, Forward to Agent and Forward to Area.
			// This is because after the errand has been handled and endCentionItem has been sent 
			// the agent which handled the errand goes into a post-handle state.
			// The agent can be in this state from a couple of seconds to a couple of minutes.
			// During this time CI consider the errand still allocated to the agent.
			// This means that the re-queue attempt will fail.
			// Whe handle this by saving the request parameters which can later
			// be picked up by a background script that tries to re-run the request.
			// Since that will eventually succeed true is returned here so that the code
			// which calls this function treats it as a success.

			object action = new Workflow.ClearInteractAction();
			action.setValue('systemgroup', Workflow.SystemGroup.minimalByAreaID(errand.targetArea.id).id);
			action.setValue('type', Workflow.ClearInteractAction.ACTION_QUEUE_ITEM);
			action.setValue('errand', errand);
			action.setValue('itemId', itemId);
			action.setValue('taskIdentifier', taskIdentifier);
			action.setValue('agentIdentifier', agentIdentifier);
			action.setValue('url', url);
			action.setValue('errandId', errandId);
			action.setValue('area', area);
			action.setValue('channel', channel);
			action.setValue('creationTime', creationTime);
			action.save();

			return true;
		}

		return false;
	}
	
	static function removeErrand( object errand, number type, boolean wasOpenedByExternalSystem ) {
		number itemId;
		string reason;
		switch( type ) {
			case Workflow.Errand.ACTION_ANSWER:         reason = 'Answered'; break;
			case Workflow.Errand.ACTION_DELETE:         reason = 'Deleted'; break;
			case Workflow.Errand.ACTION_SAVE:           reason = 'Saved'; break;
			case Workflow.Errand.ACTION_AGENT_FORWARD:  reason = 'Forwarded to Agent'; break;
			case Workflow.Errand.ACTION_AREA_FORWARD:   reason = 'Forwarded to Area'; break;
			case Workflow.Errand.ACTION_FOLDER_FORWARD: reason = 'Moved to Folder'; break;
			case Workflow.Errand.ACTION_INBOX_RETURN:   reason = 'Returned to Inbox'; break;
			default:                                    reason = 'Pulled'; break;
		}
		itemId = ClearInteract.endCentionItem(errand.externalID, reason);
		if( itemId == errand.externalID ) {
			errand.setValue('queuedInExternal', false);
			errand.save();
			return true;
		}
		return false;
	}
	
	static function pullErrand( object errand ) {
		number itemId = ClearInteract.pullCentionItem(errand.externalID);
		if( itemId == errand.externalID or itemId == -1 /* -1 = errand not in CI queue */ ) {
			errand.setValue('queuedInExternal', false);
			errand.save();
			return true;
		}
		return false;
	}

	static function neutralForwardErrandToAgent() {
		return false;
	}

	static function chatAgentsAvailable( object area ) {
		/* Tobias 2013-06-14: When using the system with Clear Interact we always
		                      say that there are agents available because CI puts
		                      the chats in a queue and then the customer waits
		                      until there is a free agent. */
		return 1;
	}

	static function assignChatAgent( object area ) {
		object owner = null;

		array list = Workflow.User.availableForChatList([ area.id ]);
		if( list ) {
			array possibleOwners = [];

			number highestAmountOfAssignedChats = list[0]['count'];
			list.each() using ( row ) {
				if( row['count'] > highestAmountOfAssignedChats ) {
					highestAmountOfAssignedChats = row['count'];
				}
			};

			if( highestAmountOfAssignedChats > 0 ) {
				list.each() using ( row ) {
					if( row['count'] == highestAmountOfAssignedChats ) {
						possibleOwners[] = row['workflow_user_id'];
					}
				};
				if( possibleOwners ) {
					number randomNumber = Math.randomNumber(0, possibleOwners.size() - 1);
					number userID = possibleOwners[randomNumber];
					owner = Workflow.User.load(userID);
				}
			}
		}

		return owner;
	}

	static function addChat( object chat ) {
		object user = (chat.user ? Workflow.User.load(chat.user.id) : null);
		number sessionItemId = (user ? user.currentExternalChatSessionID : 0);
		string creationTime = Date.localDate(chat.timestampStarted + Date.timezone()).format('%F %H:%M');
		boolean saveUser = true;

		if( not user ) {
			number itemId = -1;
			string taskIdentifier = chat.area.externalID;
			string url = "${.SystemBaseURL}/chat/answer/-/open/${chat.id}/allow-deactivate/update-id/[at_agent_id]";
			sessionItemId = ClearInteract.queueCentionSession(itemId, taskIdentifier, url, creationTime);
			saveUser = false;
		}

		if( sessionItemId > 0 ) {
			number itemId = -1;
			string errandId = 'chat/' + chat.id;
			string area = chat.area.name + '/' + chat.area.id;
			string channel = 'Chat';
			number id = ClearInteract.stampCentionItemStarted(itemId, sessionItemId, errandId, area, channel, creationTime);
			if( id > 0 ) {
				if( saveUser ) {
					chat.setValue('status', Workflow.ChatSession.STATUS_STARTED);
				} else {
					chat.setValue('user', null);
				}
				chat.setValue('externalSessionID', sessionItemId);
				chat.setValue('externalID', id);
				chat.setValue('queuedInExternal', true);
				chat.save();
				return true;
			}
		}

		return false;
	}

	static function removeChat( object chat ) {
		object user = Workflow.User.load(chat.user.id);
		number itemId = ClearInteract.stampCentionItemEnded(chat.externalID, chat.externalSessionID, 'Ended');
		if( itemId == chat.externalID ) {
			array activeChats;

			chat.setValue('queuedInExternal', false);
			chat.save();

			activeChats = Workflow.ChatSession.activeListByExternalSessionID(user.currentExternalChatSessionID);
			if( not activeChats ) {
				number sessionItemId = ClearInteract.endCentionSession(user.currentExternalChatSessionID, 'Ended');
				if( sessionItemId == user.currentExternalChatSessionID ) {
					user.setValue('currentExternalChatSessionID', 0);
					user.delayedSave();
				}
			}

			return true;
		}

		return false;
	}

	static function getChatAgents( object area ) {
		return [];
	}

	static function forwardChatToAgent( object chat, object user ) {
		return false;
	}
}
