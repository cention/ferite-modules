uses 'externalqueue';

namespace ClearInteract {
	string host = 'localhost';
	number port = 8080;
	
	function invoke( string url, string f, array parameters, string result ) {
		array body = [ "${f}Response" => [ "${f}Return" => result ] ];
		string message;
		
		message += "<?xml version='1.0' ?>";
		message += '<soapenv:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"';
		message += ' xmlns:xsd="http://www.w3.org/2001/XMLSchema"';
		message += ' xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"';
		message += ' xmlns:ser="services.soap.uqf.clearit.se">';
		
		message += '<soapenv:Body>';
		message += "<ser:${f} soapenv:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">";
		
		parameters.eachWithIndex() using ( value, index ) {
			string name = parameters.getName(index);
			message += SOAP.toSOAP(name, value, '');
		};
		
		message += "</ser:${f}>";
		message += '</soapenv:Body>';
		message += '</soapenv:Envelope>';
		
		return SOAP.RPC.sendRequest(url, '', message, body);
	}
	
	function queueCentionItem( number ItemId, string taskIdentifier, string url, string errandId, string area, string channel, string creationTime ) {
		return .invoke(
			"http://${.host}:${.port}/axis/services/UqfCention",
			'queueCentionItem',
			[
				'ItemId' => (ItemId > 0 ? ItemId : -1),
				'taskIdentifier' => taskIdentifier,
				'url' => url,
				'errandId' => errandId,
				'area' => area,
				'channel' => channel,
				'creationTime' => creationTime
			],
			'number'
		);
	}
	
	function endCentionItem( number itemId, number reason ) {
		return .invoke(
			"http://${.host}:${.port}/axis/services/UqfCention",
			'endCentionItem',
			[ 'itemId' => itemId, 'reason' => reason ],
			'number'
		);
	}
}

class ClearInteractQueue implements ExternalQueue {
	static string serverAddress = 'localhost';
	static string openErrandURL = 'http://localhost';
	
	static function name() {
		return 'clearinteract';
	}
	static function configure( array options ) {
		if( options.keyExists('server-address') )
			.serverAddress = options['server-address'];
		if( options.keyExists('open-errand-url') )
			.openErrandURL = options['open-errand-url'];
	}
	
	static function add( object errand ) {
		number id;
		ClearInteract.host = .serverAddress;
		id = ClearInteract.queueCentionItem(
				errand.externalID,
				errand.targetArea.externalID,
				"${.openErrandURL}/workflow/-/external/open/${errand.id}" +
				'errand/' + errand.id,
				errand.targetArea.name + '/' + errand.targetArea.id,
				errand.service.name,
				Date.localDate(errand.timestampArrive + Date.timezone()).format('%F %H:%M')
			);
		if( id > 0 ) {
			errand.setValue('queuedInExternal', true);
			errand.setValue('externalID', id);
			errand.save();
			return true;
		}
		return false;
	}
	
	static function remove( object errand, number type ) {
		number id = 0;
		string reason;
		switch( type ) {
			case Workflow.Errand.ACTION_ANSWER:         reason = 'Answered'; break;
			case Workflow.Errand.ACTION_DELETE:         reason = 'Deleted'; break;
			case Workflow.Errand.ACTION_SAVE:           reason = 'Saved'; break;
			case Workflow.Errand.ACTION_AGENT_FORWARD:  reason = 'Forwarded to Agent'; break;
			case Workflow.Errand.ACTION_AREA_FORWARD:   reason = 'Forwarded to Area'; break;
			case Workflow.Errand.ACTION_FOLDER_FORWARD: reason = 'Moved to Folder'; break;
			case Workflow.Errand.ACTION_INBOX_RETURN:   reason = 'Returned to Inbox'; break;
			default:                                    reason = 'Pulled'; break;
		}
		ClearInteract.host = .serverAddress;
		id = ClearInteract.endCentionItem(errand.externalID, reason);
		if( id > 0 ) {
			errand.setValue('queuedInExternal', false);
			errand.save();
			return true;
		}
		return false;
	}
}

