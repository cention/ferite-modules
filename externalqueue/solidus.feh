uses 'externalqueue';
uses 'logger';
uses 'SOAP';

class AddRequestResult {
	number EWT;
	number OpenMediaID;
	number QueuePosition;
	number RequestStatus;

	[rpc_import 'EWT:number', 'OpenMediaID:number', 'QueuePosition:number', 'RequestStatus:string'];
}

class GetOpenMediaRequestStatusByIDResult {
	string TimeStamp;
	array OpenMediaRequests;

	[rpc_import 'TimeStamp:string', 'OpenMediaRequests:array<OpenMediaRequest>'];
}

class OpenMediaRequest {
	number ID;
	number AgentID;
	string LogonID;
	string Status;
	number TenantID;
	string TimeStamp;

	[rpc_import 'AgentID:number', 'ID:number' , 'LogonID:number' , 'Status:string' , 'TenantID:number' , 'TimeStamp:string'];
}

class GetServiceGroupStatusResult {
	number ServiceGroupID;
	boolean Open;

	[rpc_import 'ServiceGroupID:number', 'Open:boolean'];
}

class GetOMAgentsByGroupResult {
	number ServiceGroupID;
	array AgentList;

	[rpc_import 'ServiceGroupID:number', 'AgentList:array<number>'];
}

class IVRInformation {
	string Data;
	string Label;

	constructor( string label, string data ) {
		.Label = label;
		.Data = data;
	}

	[rpc_export Data, Label];
}

namespace Solidus {
	static string serverAddress;
	static string soapActionURL;

	function setDefaults( string serverAddress, string soapActionURL ) {
		.serverAddress = serverAddress;
		.soapActionURL = soapActionURL;
	}

	function sendRequest( string url, string action, string f, array parameters, string result, string resultName ) {
		array body = [ "${f}Response" => [ "${resultName}" => result ] ];
		string message;

		message += "<?xml version='1.0' ?>";
		message += '<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"';
		message += ' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"';
		message += ' xmlns:xsd="http://www.w3.org/2001/XMLSchema">';
		message += '<soap:Body>';
		message += "<${f} xmlns=\"http://tempuri.org/\">";

		if( f != 'GetOpenMediaRequestStatusByID' and f != 'GetServiceGroupStatus' and f != 'GetOMAgentsByGroup' )
			message += '<request>';

		parameters.eachWithIndex() using ( value, index ) {
			string name = parameters.getName(index);
			message += SOAP.toSOAP( name, value, (f != 'GetOpenMediaRequestStatusByID' and f != 'GetServiceGroupStatus' and f != 'GetOMAgentsByGroup'
				? 'http://schemas.datacontract.org/2004/07/Solidus.OpenMedia.Contracts.DataContracts'
				: '') );
		};

		if( f != 'GetOpenMediaRequestStatusByID' and f != 'GetServiceGroupStatus' and f != 'GetOMAgentsByGroup' )
			message += '</request>';

		message += "</${f}>";
		message += '</soap:Body>';
		message += '</soap:Envelope>';

		return SOAP.RPC.sendRequest( url, action, message, body );
	}
	function addRequest( number serviceGroupID, string privateData ) {
		return .addRequest(serviceGroupID, 0, false, privateData, []);
	}
	function addRequest( number serviceGroupID, number preferredAgentID, boolean forceToPreferredAgent, string privateData ) {
		return .addRequest(serviceGroupID, preferredAgentID, forceToPreferredAgent, privateData, [], 0);
	}
	function addRequest( number serviceGroupID,
	                     number preferredAgentID,
	                     boolean forceToPreferredAgent,
	                     string privateData,
	                     array ivrInfo,
	                     number typeOfSession )
	{
		object result;

		monitor {
			array parameters;

			parameters['ForceToPreferredAgent'] = forceToPreferredAgent;
			parameters['IVRInfo'] = [ new IVRInformation('label1', 'data1'), new IVRInformation(), new IVRInformation() ];
			parameters['PreferredAgentID'] = preferredAgentID;
			parameters['PrivateData'] = privateData;
			parameters['ServiceGroupID'] = serviceGroupID;
			parameters['ServiceGroupName'] = '';
			parameters['TenantID'] = -1;

			if( typeOfSession > 0 ) {
				parameters['TypeOfSession'] = typeOfSession;
			}

			ivrInfo.eachWithIndex() using ( value, index ) {
				string data = '' + value;
				if( data.utf8Length() > 20 ) {
					data = data.utf8Slice(17) + '...';
				}
				parameters['IVRInfo'][index].Label = ivrInfo.getName(index);
				parameters['IVRInfo'][index].Data = data;
			};

			result = .sendRequest(
					.serverAddress,
					.soapActionURL + '/AddRequest',
					'AddRequest',
					parameters,
					'AddRequestResult',
					'AddRequestResult'
				);
		} handle {
			result = null;
		}

		return result;
	}

	function cancelRequest( number openMediaID ) {
		return .cancelRequest(openMediaID, true, false);
	}
	function cancelRequest( number openMediaID, boolean cancelIfAllocated ) {
		return .cancelRequest(openMediaID, cancelIfAllocated, false);
	}
	function cancelRequest( number openMediaID, boolean cancelIfAllocated, boolean doNotReport ) {
		boolean result;

		monitor {
			array parameters;

			parameters['CancelIfAllocated'] = cancelIfAllocated;
			parameters['DoNotReport'] = doNotReport;
			parameters['OpenMediaID'] = openMediaID;

			result = .sendRequest(
				.serverAddress,
				.soapActionURL + '/CancelRequest',
				'CancelRequest',
				parameters,
				'boolean',
				'CancelRequestResult'
			);
		} handle {
			result = false;
		}

		return result;
	}

	function getOpenMediaRequestStatus( number openMediaID ) {
		object result;

		monitor {
			array parameters;

			parameters['openMediaID'] = openMediaID;

			result = .sendRequest(
				.serverAddress,
				.soapActionURL + '/GetOpenMediaRequestStatusByID',
				'GetOpenMediaRequestStatusByID',
				parameters,
				'GetOpenMediaRequestStatusByIDResult',
				'GetOpenMediaRequestStatusByIDResult'
			);
		} handle {
			result = null;
		}

		return result;
	}

	function getServiceGroupStatus( number serviceGroupID ) {
		object result;

		monitor {
			array parameters = [];

			parameters['serviceGroupID'] = serviceGroupID;

			result = .sendRequest(
					.serverAddress,
					.soapActionURL + '/GetServiceGroupStatus',
					'GetServiceGroupStatus',
					parameters,
					'GetServiceGroupStatusResult',
					'GetServiceGroupStatusResult'
				);
		} handle {
			result = null;
		}

		return result;
	}

	function getOMAgentsByGroup( number serviceGroupID ) {
		object result;

		monitor {
			array parameters = [];

			parameters['serviceGroupID'] = serviceGroupID;

			result = .sendRequest(
					.serverAddress,
					.soapActionURL + '/GetOMAgentsByGroup',
					'GetOMAgentsByGroup',
					parameters,
					'GetOMAgentsByGroupResult',
					'GetOMAgentsByGroupResult'
				);
		} handle {
			result = null;
		}

		return result;
	}

	function setOptions( number typeOfSession,
	                     number agentActionOptions,
	                     number closeTabOptions,
	                     number maxNumberOfSessions,
	                     number allowDifferentTypes,
	                     boolean resetAllOptions )
	{
		boolean result;

		monitor {
			array parameters = [];

			parameters['AgentActionOptions'] = agentActionOptions;
			parameters['AllowDifferentTypes'] = allowDifferentTypes;
			parameters['CloseTabOptions'] = closeTabOptions;
			parameters['MaxNumberOfSessions'] = maxNumberOfSessions;
			parameters['ResetAllOptions'] = resetAllOptions;
			parameters['TypeOfSession'] = typeOfSession;

			result = .sendRequest(.serverAddress,
			                      .soapActionURL + '/SetOptions',
			                      'SetOptions',
			                      parameters,
			                      'boolean',
			                      'SetOptionsResult');
		} handle {
				result = false;
		}

		return result;
	}
}

class SolidusCancelRequestAction {
	number openMediaID;
	boolean cancelIfAllocated;
}

class SolidusQueue implements ExternalQueue {
	static string SystemBaseURL;

	static function name() {
		return 'solidus';
	}
	static function configure( array options ) {
		if( options.keyExists('server-address') and options.keyExists('soap-action-url') )
			Solidus.setDefaults(options['server-address'], options['soap-action-url']);
		if( options.keyExists('open-errand-url') )
			.SystemBaseURL = options['open-errand-url'];
	}

	static function setOptions( object errand ) {
		object systemgroup = Workflow.SystemGroup.minimalByAreaID(errand.targetArea.id);
		object setting = Workflow.SolidusChannelSetting.byChannel(systemgroup.id, errand.service.type);
		setting and ._setOptions(setting);
	}
	static function _setOptions( object setting ) {
		Solidus.setOptions(setting.typeOfSession,
		                   setting.agentActionOptions,
		                   setting.closeTabOptions,
		                   setting.maxNumberOfSessions,
		                   setting.allowDifferentTypes,
		                   false /* resetAllOptions */);
	}

	static array queuedRemoveErrandActions;
	static function finaliseActions() {
		.queuedRemoveErrandActions.each() using ( action ) {
			boolean result = ._remove(action.openMediaID, action.cancelIfAllocated);
			if( not result ) {
				// The action is saved so it can be re-tried in the background instead.
				object savedAction = new Workflow.SolidusCancelRequestAction();
				savedAction.setValue('openMediaID', action.openMediaID);
				savedAction.setValue('cancelIfAllocated', action.cancelIfAllocated);
				savedAction.save();
			}
		};
	}

	static function addErrand( object errand, object user ) {
		object area = Workflow.Area.load(errand.targetArea.id);
		object systemgroup = Workflow.SystemGroup.minimalByAreaID(errand.targetArea.id);
		object setting = Workflow.SolidusChannelSetting.byChannel(systemgroup.id, errand.service.type);

		string privateData = .SystemBaseURL + '/solidus/login/-/errand/' + errand.id;
		number preferredAgentID = (user ? user.solidusAgentID : 0);
		boolean forceToPreferredAgent = (preferredAgentID ? true : false);
		array ivrInfo = [
			'Errand' => '' + errand.id,
			'From' => (errand.mail and errand.mail.from
				? (errand.mail.from.name
					? '{0} ({1})'.expand(errand.mail.from.name, errand.mail.from.emailAddress)
					: errand.mail.from.emailAddress)
				: 'No Sender'),
			'Subject' => (errand.message ? errand.message.subject : 'No Subject')
		];
		number typeOfSession = (setting ? setting.typeOfSession : 0);

		object result;

		setting and ._setOptions(setting);

		Logger.info(Logger.APPLICATION_SOLIDUS, "Sending add request with preferredAgentID as ${preferredAgentID} for Workflow.Errand(${errand.id}).");

		result = Solidus.addRequest(area.solidusServiceGroupID, preferredAgentID, forceToPreferredAgent, privateData, ivrInfo, typeOfSession);
		if( result and result.OpenMediaID > 0 ) {
			Logger.info(Logger.APPLICATION_SOLIDUS, "Workflow.Errand(${errand.id}) have been successfully queued as ${result.OpenMediaID}." +
				" Queue position is ${result.QueuePosition}, EWT is ${result.EWT}.");
			errand.setValue('queuedInExternal', true);
			errand.setValue('solidusOpenMediaID', result.OpenMediaID);
			errand.save();
			return true;
		}
		else {
			Logger.info(Logger.APPLICATION_SOLIDUS, "Failed to add Workflow.Errand(${errand.id}) to queue.");
			return false;
		}
	}

	static function removeErrand( object errand, number type, boolean wasOpenedByExternalSystem ) {
		if( wasOpenedByExternalSystem ) {
			object action = new SolidusCancelRequestAction();
			action.openMediaID = errand.solidusOpenMediaID;
			action.cancelIfAllocated = true;

			.queuedRemoveErrandActions[] = action;

			errand.setValue('queuedInExternal', false);
			errand.setValue('solidusOpenMediaID', 0);
			errand.save();

			return true;
		}

		return ._remove(errand, true);
	}
	static function _remove( object errand, boolean cancelIfAllocated ) {
		.setOptions(errand);
		Logger.info(Logger.APPLICATION_SOLIDUS, "Sending cancel request for Workflow.Errand(${errand.id}) (${errand.solidusOpenMediaID})");
		if( Solidus.cancelRequest(errand.solidusOpenMediaID, cancelIfAllocated) ) {
			Logger.info(Logger.APPLICATION_SOLIDUS, "Cancel request returned true for Workflow.Errand(${errand.id}) (${errand.solidusOpenMediaID})");
			errand.setValue('queuedInExternal', false);
			errand.setValue('solidusOpenMediaID', 0);
			errand.save();
			return true;
		} else {
			Logger.info(Logger.APPLICATION_SOLIDUS, "Cancel request returned false for Workflow.Errand(${errand.id}) (${errand.solidusOpenMediaID})");
			return false;
		}
	}
	static function _remove( number openMediaID, boolean cancelIfAllocated ) {
		Logger.info(Logger.APPLICATION_SOLIDUS, "Sending cancel request for Open Media ID ${openMediaID} (${cancelIfAllocated})");
		if( Solidus.cancelRequest(openMediaID, cancelIfAllocated) ) {
			Logger.info(Logger.APPLICATION_SOLIDUS, "Cancel request returned true for Open Media ID ${openMediaID} (${cancelIfAllocated})");
			return true;
		} else {
			Logger.info(Logger.APPLICATION_SOLIDUS, "Cancel request returned false for Open Media ID ${openMediaID} (${cancelIfAllocated})");
			return false;
		}
	}

	static function pullErrand( object errand ) {
		boolean failed = true;
		object status;

		Logger.info(Logger.APPLICATION_SOLIDUS, "Pulling errand ${errand.id} which is registered as ${errand.solidusOpenMediaID}");

		status = Solidus.getOpenMediaRequestStatus(errand.solidusOpenMediaID);
		if( status ) {
			if( status.OpenMediaRequests )  {
				if( status.OpenMediaRequests[0].Status == 'Queued' /* Queued at the Service Group */ ) {
					Logger.info(Logger.APPLICATION_SOLIDUS, "Status in Solidus for errand ${errand.id} (${errand.solidusOpenMediaID})" +
						" is 'Queued at the Service Group'");
					if( SolidusQueue._remove(errand, false) ) {
						Logger.info(Logger.APPLICATION_SOLIDUS, "Successfully canceled errand ${errand.id} in Solidus");
						failed = false;
					} else {
						Logger.info(Logger.APPLICATION_SOLIDUS, "Unable to cancel errand ${errand.id} (${errand.solidusOpenMediaID}) in Solidus");
					}
				} else if( status.OpenMediaRequests[0].Status == 'Complete' /* Completed */ ) {
					Logger.info(Logger.APPLICATION_SOLIDUS, "Status in Solidus for errand ${errand.id} (${errand.solidusOpenMediaID}) is 'Completed'");
					failed = false;
					errand.setValue('queuedInExternal', false);
					errand.setValue('solidusOpenMediaID', 0);
					errand.save();
				} else {
					// TODO: Log status message here
				}
			} else {
				Logger.info(Logger.APPLICATION_SOLIDUS, "Got status from Solidus for errand ${errand.id} (${errand.solidusOpenMediaID})" +
					" but media had no previous requests registered");
			}
		} else {
			Logger.info(Logger.APPLICATION_SOLIDUS, "Unable to get status from Solidus for errand ${errand.id} (${errand.solidusOpenMediaID})");
			failed = false;
			errand.setValue('queuedInExternal', false);
			errand.setValue('solidusOpenMediaID', 0);
			errand.save();
		}

		return (not failed);
	}

	static function neutralForwardErrandToAgent() {
		return true;
	}

	static function chatAgentsAvailable( object area ) {
		object result = Solidus.getServiceGroupStatus(area.solidusServiceGroupID);
		if( result and result.Open )
			return 1;
		return 0;
	}

	static function getChatAgents( object area ) {
		object fullArea = Workflow.Area.load(area.id);

		array list = [];
		array solidusAgentIDs = [];
		array agentToServiceGroupMap = [];
		array usersByGroupList = [];
		array groupNames = [];

		array userIDsInTargetArea = Workflow.User.listFromCache(fullArea.id).process() using ( item ) {
			return item['id'];
		};

		string serviceGroupIDs = (fullArea.solidusServiceGroupIDsForChat
			? fullArea.solidusServiceGroupIDsForChat
			: '' + fullArea.solidusServiceGroupID);

		object currentUser;
		monitor {
			currentUser = Workflow.User.fetchUserObject();
		} handle {
			currentUser = null;
		}

		serviceGroupIDs.toArray(',').each() using ( _serviceGroupID ) {
			number serviceGroupID = _serviceGroupID.trim(' ').toNumber();
			object result = Solidus.getOMAgentsByGroup(serviceGroupID);
			if( result ) {
				result.AgentList.each() using ( agentID ) {
					if( not solidusAgentIDs.valueExists(agentID) ) {
						solidusAgentIDs[] = agentID;
						agentToServiceGroupMap["$agentID"] = serviceGroupID;
					}
				};
			}
		};

		solidusAgentIDs.each() using ( agentID ) {
			object user = Workflow.User.bySolidusAgentID(agentID);
			if( user and (currentUser == null or user.id != currentUser.id) and userIDsInTargetArea.valueExists(user.id) ) {
				array validGroups = Workflow.AreaAgentGroup.idListByAreaID(user.systemGroup, fullArea.id);
				array groups = Workflow.AreaAgentGroup.listByUserID(user.systemGroup, user.id);
				groups.each() using ( group ) {
					if( validGroups.valueExists(group.id) ) {
						if( not usersByGroupList.keyExists(group.name) )
							usersByGroupList[group.name] = [];
						usersByGroupList[group.name][] = user;
					}
				};
			}
		};

		groupNames = usersByGroupList.keys().sort() using (a, b) {
			return String.orderedCompare(a, b);
		};

		groupNames.each() using ( groupName ) {
			array users = usersByGroupList[groupName].sort() using ( a, b ) {
				return String.orderedCompare(a.username, b.username);
			};
			list[] = [ 'id' => 0, 'value' => groupName, 'separator' => true ];
			users.each() using ( user ) {
				list[] = [ 'id' => user.id, 'value' => user.username ];
				// Tobias 2013-10-24: Save a Service Group ID that we know that
				// this user has access to so that it can be used when forwarding
				// a chat to this user.
				user.setValue('solidusLastKnownValidServiceGroupID', agentToServiceGroupMap["${user.solidusAgentID}"]);
				user.delayedSave();
			};
		};

		return list;
	}

	static function assignChatAgent( object area ) {
		return null;
	}

	static function _addChat( object chat, object user, number serviceGroupID ) {
		object setting = Workflow.SolidusChannelSetting.byChannel(chat.systemGroup, Workflow.Errand.SERVICE_CHAT);
		object area = Workflow.Area.load(chat.area.id);

		string privateData = .SystemBaseURL + '/solidus/login/-/chat/' + chat.id;
		number preferredAgentID = (user ? user.solidusAgentID : 0);
		boolean forceToPreferredAgent = (preferredAgentID ? true : false);
		array ivrInfo = [
			'Area' => chat.area.name,
			'Email' => (chat.client and chat.client.email
				? (chat.client.email.name
					? '{0} ({1})'.expand(chat.client.email.name, chat.client.email.emailAddress)
					: chat.client.email.emailAddress)
				: 'Unknown'),
			'Message' => (closure {
					object lastMessageFromClient = Workflow.ChatMessage.lastMessageFromClient(chat.id);
					return (lastMessageFromClient and lastMessageFromClient.message
						? (lastMessageFromClient.message.utf8Length() > 125
							? lastMessageFromClient.message.utf8Slice(125) + '...'
							: lastMessageFromClient.message)
						: 'No Message');
				}).invoke()
		];
		number typeOfSession = (setting ? setting.typeOfSession : 0);

		object result;

		setting and ._setOptions(setting);

		Logger.info(Logger.APPLICATION_SOLIDUS, "Sending add request for Workflow.ChatSession(${chat.id}).");

		result = Solidus.addRequest((serviceGroupID ? serviceGroupID : area.solidusServiceGroupID),
		                            preferredAgentID,
		                            forceToPreferredAgent,
		                            privateData,
		                            ivrInfo,
		                            typeOfSession);
		if( result and result.OpenMediaID > 0 ) {
			Logger.info(Logger.APPLICATION_SOLIDUS, "Workflow.ChatSession(${chat.id}) have been successfully" +
				" queued as ${result.OpenMediaID}. Queue position is ${result.QueuePosition}, EWT is ${result.EWT}," +
				" request status is ${result.RequestStatus}.");
			chat.setValue('queuedInExternal', true);
			chat.setValue('externalID', result.OpenMediaID);
			chat.save();
			return true;
		} else {
			Logger.info(Logger.APPLICATION_SOLIDUS, "Failed to add Workflow.ChatSession(${chat.id}) to queue (${result.RequestStatus}).");
			return false;
		}
	}

	static function _addChat( object chat, object user ) {
		return ._addChat(chat, user, 0);
	}

	static function addChat( object chat ) {
		return ._addChat(chat, null);
	}

	static function removeChat( object chat ) {
		object channelSetting = Workflow.SolidusChannelSetting.byChannel(chat.systemGroup, Workflow.Errand.SERVICE_CHAT);
		channelSetting and ._setOptions(channelSetting);
		Solidus.cancelRequest(chat.externalID, true);
		chat.setValue('queuedInExternal', false);
		chat.save();
		return true;
	}

	static function forwardChatToAgent( object chat, object user ) {
		number oldExternalID = chat.externalID;
		if( ._addChat(chat, user, user.solidusLastKnownValidServiceGroupID) ) {
			Solidus.cancelRequest(oldExternalID, true);
			return true;
		}
		return false;
	}
}

