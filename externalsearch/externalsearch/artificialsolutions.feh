uses 'JSON';
uses 'logger';
uses 'network';
uses 'cention_twitter'; // Need this for urlDecode() in String namespace.
uses 'apache'; // Tobias 2013-12-02: WARNING! UGLY HACK!
               //                    NEED TO INCLUDE THIS FOR ANOTHER urlDecode() FUNCTION.
uses 'cmail';
uses 'MailUtilities';

class ArtificialSolutionsSearch implements ExternalSearch {
	final static string COMMAND_LOGIN = '?command=login&viewname=STANDARDJSONP&userRole=agent';
	final static string COMMAND_LOGOUT = 'endsession';
	final static string COMMAND_SEARCH = '?command=request&viewname=STANDARDJSONP&userRole=agent&userinput=';
	final static string COMMAND_SHORTCUT = '?command=shortcut&viewname=STANDARDJSONP&userRole=agent&userinput=';
	final static string COMMAND_LIST_SHORTCUTS = '?command=list_shortcuts&viewname=STANDARDJSONP&userRole=agent';
	final static string COMMAND_TEMPLATE = '?command=template&viewname=STANDARDJSONP&userRole=agent&userinput=';
	final static string COMMAND_LIST_TEMPLATES = '?command=list_templates&viewname=STANDARDJSONP&userRole=agent&userinput=';

	string jsessionid;

	function login( object rules ) {
		string url = rules.data1 + ArtificialSolutionsSearch.COMMAND_LOGIN;
		object http;
		object response;

		Logger.info('cention', "GET: ${url}");

		http = Network.HTTP.get(url);
		response = http.run();

		if( response.success() ) {
			object data;
			monitor {
				data = JSON.parse(response.body().trim('()'));
			} handle {
				data = null;
			}
			if( data ) {
				object match = Regexp.match(';jsessionid=([A-z0-9]+)', data.responseData.applicationUrl);
				if( match ) {
					.jsessionid = match.capture(0);
					return true;
				}
			}
		}
		return false;
	}
	function logout( object rules ) {
		string url = rules.data1 + ArtificialSolutionsSearch.COMMAND_LOGOUT + ';jsessionid=' + .jsessionid;
		object http;
		object response;
		Logger.info('cention', "GET: ${url}");
		http = Network.HTTP.get(url);
		response = http.run();
		return response.success();
	}

	function search( object rules, string text ) {
		array list = [];

		if( .login(rules) ) {
			string url = rules.data1 + ';jsessionid=' + .jsessionid + ArtificialSolutionsSearch.COMMAND_SEARCH + text.urlEncode();
			object http;
			object response;

			Logger.info('cention', "GET: ${url}");

			http = Network.HTTP.get(url);
			response = http.run();

			if( response.success() ) {
				object data;
				monitor {
					data = JSON.parse(response.body().trim('()'));
				} handle {
					data = null;
				}
				if( data ) {
					object apache = Request.current();
					string answer = (apache ? apache.urlDecode(data.responseData.answer.urlDecode()) : data.responseData.answer);
					string subject = (answer.utf8Length() > 40 ? answer.utf8Slice(37) + '...' : answer);
					list[] = [ 'id' => 1, 'subject' => subject, 'body' => answer, 'html_body' => '' ];
				}
			}

			.logout(rules);
		}

		return list;
	}

	function _getTemplate( object rules, string subject, boolean useSecondarySource ) {
		string url = rules.data1 + (.jsessionid ? ';jsessionid=' + .jsessionid : '') + (useSecondarySource
			? ArtificialSolutionsSearch.COMMAND_SHORTCUT
			: ArtificialSolutionsSearch.COMMAND_TEMPLATE) + subject.urlEncode();
		object http;
		object response;

		Logger.info('cention', "GET: ${url}");

		http = Network.HTTP.get(url);
		response = http.run();

		if( response.success() ) {
			object data;
			monitor {
				data = JSON.parse(response.body().trim('()'));
			} handle {
				data = null;
			}
			if( data ) {
				object apache = Request.current();
				return (apache ? apache.urlDecode(data.responseData.answer.urlDecode()) : data.responseData.answer);
			}
		}

		return '';
	}

	function templates( object rules, boolean useSecondarySource ) {
		array list = [];
		string url = rules.data1 + (useSecondarySource
			? ArtificialSolutionsSearch.COMMAND_LIST_SHORTCUTS
			: ArtificialSolutionsSearch.COMMAND_LIST_TEMPLATES);
		object http;
		object response;
		
		Logger.info('cention', "GET: ${url}");

		http = Network.HTTP.get(url);
		response = http.run();

		if( response.success() ) {
			object data;
			monitor {
				data = JSON.parse(response.body().trim('()'));
			} handle {
				data = null;
			}
			if( data ) {
				object apache = Request.current();
				string answer = (apache ? apache.urlDecode(data.responseData.answer.urlDecode()) : data.responseData.answer);

				answer.toArray("\n").eachWithIndex() using ( subject, index ) {
					list[] = [ 'id' => index + 1, 'subject' => subject, 'body' => ._getTemplate(rules, subject, useSecondarySource), 'html_body' => '' ];
				};
			}
		};

		return list;
	}
}
