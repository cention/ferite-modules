uses 'curl';
uses 'console';
uses "xml";
uses "array","date",'math','sys','MHash','regexp';
uses "string", "JSON";

/**
   * Created @Mujibur Rahman 
   * Email: mujibur.rahman@cention.se
   * Date: 24-09-2012
   * Name: Twitter module which will be able to Authenticate, Authorize, 
   * Fetch Mention message and Post messages on time line.
**/

namespace modifies String {
    function urlDecode( string encoded ) {
        string decoded;
        number i = 0;
        number max = encoded.length() - 6;
        while( i <= max ) {
			string character = encoded[i];
			if( character == '%' and encoded[i + 1] == 'u' ) {
				number start = i + 2;
				number end = start + 4;
				number value = String.hexStringToNumber((end < encoded.length() ? encoded[start..end] : encoded[start..]));
				i += 6;						   
				if( value < 0x0080 ) { // 1 byte: 0xxxxxxx
						character = String.numberToByte(value);
				} else if( value < 0x0800 ) { // 2 bytes: 110xxxxx 10xxxxxx
						character = String.numberToByte(((value & 0x07c0) >> 6) | 0xc0) +
									String.numberToByte((value & 0x3f) | 0x80);
				} else { // 3 bytes: 1110xxxx 10xxxxxx 10xxxxxx
						character = String.numberToByte(((value & 0xf000) >> 12) | 0xe0) + 
									String.numberToByte(((value & 0x0fc0) >> 6) | 0x80) + 
									String.numberToByte((value & 0x3f) | 0x80);
				}
			} else {
				i++;
			}
				   
			decoded += character;
		}
        return decoded + (i < encoded.length() ? encoded[i..] : '');
    }
}
namespace modifies Array {
	function ksort( array values ) {
		array result = [];
		array keys = values.keys();
		keys = keys.sort() using ( a, b ) {
			return String.orderedCompare(a, b);
		};
		keys.each() using ( key ) {
			result[key] = values[key];
		};
		return result;
	}
}
namespace Twitter {
	class TwitterMain {	
		static string mentionURI = 'https://api.twitter.com/1.1/statuses/mentions_timeline.json'; 
		static string sendMentionURI = 'https://api.twitter.com/1.1/statuses/update.json'; 
		static string directMessageURI = 'https://api.twitter.com/1.1/direct_messages.json'; 
		static string sendDirectMessageURI = 'https://api.twitter.com/1.1/direct_messages/new.json';
		 
		constructor(){
		}
		function buildBaseString(string baseURI, array params, string method){
			array r = []; //temporary array
			params = params.ksort(); //sort params alphabetically by keys
			params.eachWithIndex() using ( value, index ) {
				string key = params.getName(index);
				r[] = "${key}=" + String.urlEncode("${value}"); //create key=value strings
			};

			return method.toUpper() + "&" + baseURI.urlEncode() + '&' + r.join('&').urlEncode(); //return complete base string
		}
		function buildAuthorizationHeader(array oauth){
			string r = 'Authorization: OAuth '; //header prefix

			array values = []; //temporary key=value array
			oauth.eachWithIndex() using ( value, index ) {
				string key = oauth.getName(index);
				values[] = "${key}=\"" + String.urlEncode("${value}") + "\""; //encode key=value string
			};

			r += values.join(', '); //reassemble
			return r; //return full authorization header
		}
		function getCompositeKey(string baseString, string consumerSecret, string requestToken){
			string compositeKey = consumerSecret.urlEncode() + '&' + requestToken.urlEncode();
			string oauth_signature = MHash.hmacString(baseString, compositeKey, MHash.SHA1).base64encode(); //sign the base string
			return oauth_signature; // Even though the name of the function is 'getCompositeKey' this function actually returns oauth_signature
		}
	}
	class TwitterAuthentication extends TwitterMain{	
		function sendRequest(array oauth, string baseURI, string header){
			return .sendRequest(oauth, baseURI);
		}
		function sendRequest(array oauth, string baseURI){
			array header = [ .buildAuthorizationHeader(oauth) ]; //create header array and add 'Expect:'
			object curl = new Curl.Curl();
			curl.setOption(Curl.CURLOPT_URL, baseURI);
			curl.setOption(Curl.CURLOPT_RETURNTRANSFER, 1);
			//curl.setOption(Curl.CURLOPT_VERBOSE, 1);
			curl.setOption(Curl.CURLOPT_HTTPHEADER, header.join("\n"));
			if( not curl.exec() ) {
				raise new Error("Error when connecting to: ${baseURI}");
			}
			return curl.getContent();
		}
	}
	class TwitterFetchTimeline extends TwitterMain{	
		function sendRequest(array oauth, string baseURI, string header){
			array oauthHeader;
			array data;
			string content;
			object curl = new Curl.Curl();			
			oauthHeader = [ header ];
			curl.setOption(Curl.CURLOPT_HTTPHEADER, oauthHeader.join("\n"));
			curl.setOption(Curl.CURLOPT_URL, baseURI);
			curl.setOption(Curl.CURLOPT_RETURNTRANSFER, 1);
			//curl.setOption(Curl.CURLOPT_VERBOSE, 1);
			curl.setOption(Curl.CURLOPT_SSL_VERIFYPEER, 0);
			if( curl.exec() ) {
				content = curl.getContent();
				monitor {
					data = JSON.parse( content );					
				} handle {
					raise new Error("Error when parsing response: ${content}");
				}
			} 
			else {
				raise new Error("Error when connecting to: ${baseURI}");
			}			
			return data;
		}
	}
	
	class TwitterSendPostStatus extends TwitterMain{
		function buildBaseStringSend(string baseURI, array oauth, string method, array message){
			array tempArray;	
			string url;
			string parameters;
			
			oauth = oauth.ksort();
			oauth.eachWithIndex() using ( value, index ){
				string key = oauth.getName(index);
				tempArray[] = "${key}=" + String.urlEncode("${value}"); //create key=value strings
			};

			message.eachWithIndex() using ( value, index ){
				string key;
				key = message.getName(index);
				tempArray[] = "${key}=" + String.urlEncode("${value}"); //create key=value strings
			};
			
			url = String.urlEncode( baseURI );
			
			parameters = tempArray.join("&");
			parameters = String.urlEncode( parameters );
			
			return "POST&" + url + "&" + parameters;
		}
		function generatePostfields(array message){
			string postfield;
			array MessageArray;
			message.eachWithIndex() using ( value, index ){
				string key;
				string encodeMessage;
				key = message.getName(index);
				encodeMessage = String.urlEncode(''+value);
				MessageArray[] = key + "=" + encodeMessage;
			};
			postfield =  MessageArray.join("&");
			return postfield;
		}
		function sendRequest(array oauth, string baseURI, string header, string postfield){
			array oauthHeader;
			array response;
			object data;
			string content;
			object curl = new Curl.Curl();
			oauthHeader = [ header ];
			curl.setOption(Curl.CURLOPT_URL, baseURI);
			curl.setOption(Curl.CURLOPT_HTTPHEADER, oauthHeader.join("\n"));
			curl.setOption(Curl.CURLOPT_RETURNTRANSFER, 1);
			//curl.setOption(Curl.CURLOPT_VERBOSE, 1);
			curl.setOption(Curl.CURLOPT_SSL_VERIFYPEER, 0);
			curl.setOption(Curl.CURLOPT_POST, 1);
			curl.setOption(Curl.CURLOPT_POSTFIELDS, postfield);		
			if( curl.exec() ) {
				content = curl.getContent();
				monitor {
					data = JSON.parse(content);
				}  handle {
					raise new Error("Error when parsing response: ${content}");
				}
			} else {
				raise new Error("Error when connecting to: ${baseURI}");
			}
			return data;
		}
	}
	
}
